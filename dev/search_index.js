var documenterSearchIndex = {"docs":
[{"location":"mbar/#MBAR-(Multistate-Bennett-acceptance-ratio)","page":"MBAR (Multistate Bennett acceptance ratio)","title":"MBAR (Multistate Bennett acceptance ratio)","text":"","category":"section"},{"location":"mbar/","page":"MBAR (Multistate Bennett acceptance ratio)","title":"MBAR (Multistate Bennett acceptance ratio)","text":"mbar(u_kl; ftol=1e-8, iterations=10^2)","category":"page"},{"location":"mbar/#MDToolbox.mbar-Tuple{Any}","page":"MBAR (Multistate Bennett acceptance ratio)","title":"MDToolbox.mbar","text":"mbar(u_kl; ftol=1e-8, iterations=10^2) -> F\n\nEstimates the free energy differences of umbrella-windowed systems by using the Multistate Bennet Acceptance Ratio Method (MBAR). Let K be # of umbrellas or different ensembles. u_kl is a K x K Array whose elements are reduced bias-factor or  potential energy of umbrella (or ensemble) simulation data k evaluated at umbrella (or ensemble) l. \n\nReturns (dimensionless) free energies of umbrella-windows or ensembles f_k. \n\nReferences\n\nM. R. Shirts and J. D. Chodera, J. Chem. Phys. 129, 124105 (2008).\n\n\n\n\n\n","category":"method"},{"location":"free_energy_surface/#Free-energy-surface-from-MD-data","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"","category":"section"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"using MDToolbox, PyPlot\nPyPlot.plt.style.use(\"seaborn-colorblind\");\nENV[\"COLUMNS\"] = 110; #display width for MDToolbox","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"t = mdload(\"data/md_alad/3_prod/run.nc\")","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"25000x22 TrjArray{Float64, Int64}\n|    25.34    26.27     7.20 |    26.40    26.06     7.38 |  …      27.66    24.28     1.80 |\n|    24.75    24.72     8.90 |    25.58    25.42     8.84 |         28.27    22.61     4.44 |\n|    24.47    22.00     5.86 |    25.17    22.73     6.27 |         29.75    23.57     1.87 |\n|    23.57    26.11     6.03 |    24.51    25.66     5.71 |         29.66    22.81     2.70 |\n|    26.32    23.52     7.24 |    26.54    24.44     6.70 |         29.91    22.20     1.51 |\n|    24.21    22.59     6.21 |    25.26    22.75     5.96 |  …      28.10    21.81     0.10 |\n|    26.95    24.89     6.85 |    26.18    24.24     6.45 |         26.81    21.15     1.42 |\n|    27.36    23.49     6.32 |    26.93    22.64     5.78 |         27.24    23.90    -0.74 |\n|    27.12    19.64     3.78 |    27.86    20.26     4.27 |         23.79    21.29     0.84 |\n|    29.50    19.76     5.16 |    28.64    19.65     5.82 |         26.38    21.90     0.19 |\n|    28.54    19.49     6.72 |    28.40    19.95     5.74 |  …      25.43    24.72     3.90 |\n|    29.33    20.18     6.97 |    29.77    20.30     5.98 |         27.76    24.25     1.63 |\n|    32.56    20.54     2.88 |    32.03    19.76     3.44 |         28.92    24.60     1.71 |\n|             ⋮              |             ⋮              |  ⋱               ⋮              |\n|    -1.05    -2.81    15.52 |    -1.66    -2.27    14.79 |          3.70     1.55    12.25 |\n|    34.05    32.72    14.18 |    33.53    33.56    14.62 |         37.93    36.87    11.40 |\n|    -1.27    33.18    12.34 |    -0.27    33.61    12.28 |  …       1.11    39.69    10.73 |\n|    -1.18    33.79    15.82 |    -0.62    33.68    14.89 |          3.18    38.70    11.42 |\n|    35.02    -3.69    13.89 |    35.49    -3.20    13.04 |         35.02     3.96    10.29 |\n|    34.78    -3.02    14.48 |    33.77    -3.32    14.18 |         34.77     4.24    12.08 |\n|    31.99    33.70    12.31 |    32.85    34.34    12.11 |         35.29    41.25    14.14 |\n|    30.81    -2.43    12.38 |    31.81    -2.04    12.56 |  …      35.48     2.87    14.05 |\n|    30.95    -0.70    12.71 |    31.90    -0.67    13.23 |         35.19     5.86    15.29 |\n|    31.37    -0.22    14.45 |    31.76     0.45    15.22 |         38.16     1.58    13.56 |\n|    31.72     0.76    14.82 |    32.19     1.17    15.71 |         39.10     4.15    14.29 |\n|    -2.06    -0.18    15.60 |    -1.91     0.63    16.32 |          5.14     3.89    14.39 |","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"phi = compute_dihedral(t[:, 5], t[:, 7], t[:, 9], t[:, 15]);\npsi = compute_dihedral(t[:, 7], t[:, 9], t[:, 15], t[:, 17]);\n\nphi","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"25000-element Vector{Float64}:\n  -65.90269553859062\n  -91.89979984268491\n  -47.7621904698176\n -164.51294405466734\n -158.66552870164284\n  -79.32733553727321\n  -74.10317756217691\n  -78.5835973452824\n  -76.68726929143479\n -153.85903680522748\n  -79.38121914513528\n  -48.656395015167305\n  -69.25782034039702\n    ⋮\n  -79.72782448566164\n  -64.01818284760004\n  -63.31297612678819\n -137.09794430666201\n -144.83214485800534\n -156.44064848456972\n  -72.54439458978895\n  -77.14563641267912\n  -66.05171633864515\n  -55.903505167253\n  -73.65732591140954\n  -79.84791452844857","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"fig, ax = subplots(figsize=(7, 6));\nax.scatter(phi, psi, s=0.5);\nxlabel(L\"\\Phi [degree]\",fontsize=20);\nylabel(L\"\\Psi [degree]\",fontsize=20);\n\n# detailed options (if your prefer to change details)\nax.set(xlim=[-180, 180], ylim=[-180, 180]);\nax.xaxis.set_tick_params(which=\"major\",labelsize=15);\nax.yaxis.set_tick_params(which=\"major\",labelsize=15);\nax.grid(linestyle=\"--\", linewidth=0.5);\ntight_layout();\n\nsavefig(\"free_energy_surface01.png\", dpi=350);","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"(Image: png)","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"grid_x = -180:1:180;\ngrid_y = -180:1:180;\npmf, grid_x, grid_y = compute_pmf(phi, psi, grid_x=grid_x, grid_y=grid_y, bandwidth=[2.0, 2.0], boxsize=[360.0, 360.0]);\nKBT = KB_kcalpermol*300.0;\npmf = KBT .* pmf;\n\npmf","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"361×361 Matrix{Float64}:\n 5.19818  5.16962  5.02327  4.58794  4.04907  3.57489  …  6.47349  5.93619  5.54744  5.30505  5.19818\n 5.9452   5.63961  5.08423  4.45461  3.89908  3.45391     7.32602  6.78707  6.39436  6.13416  5.9452\n 6.49204  5.76498  5.00436  4.33603  3.7889   3.36295     8.32093  7.77604  7.36103  6.99699  6.49204\n 6.68768  5.78588  4.98661  4.31534  3.77254  3.35226     9.39141  8.81221  8.27933  7.5816   6.68768\n 6.74538  5.86856  5.08184  4.41629  3.87486  3.45242     9.38433  8.80073  8.26792  7.5993   6.74538\n 6.50756  5.89514  5.2263   4.61043  4.08889  3.67019  …  8.32641  7.77198  7.33912  6.96244  6.50756\n 5.82914  5.52432  5.1344   4.71073  4.30916  3.95592     7.35515  6.80629  6.39255  6.08758  5.82914\n 5.08907  4.89863  4.67567  4.44443  4.24825  4.09256     6.53259  5.98585  5.5785   5.29322  5.08907\n 4.4589   4.32093  4.16798  4.01199  3.91002  3.89757     5.85882  5.31345  4.91004  4.63575  4.4589\n 3.96558  3.86695  3.7657   3.65345  3.58479  3.61328     5.33391  4.78952  4.38895  4.12257  3.96558\n 3.61363  3.5478   3.49472  3.42528  3.382    3.42584  …  4.9579   4.41424  4.01577  3.75529  3.61363\n 3.40485  3.36612  3.35809  3.33458  3.32002  3.37734     4.73084  4.18771  3.79078  3.53471  3.40485\n 3.34054  3.32368  3.35633  3.38096  3.40042  3.47411     4.65274  4.11     3.71421  3.46141  3.34054\n ⋮                                            ⋮        ⋱                                      ⋮\n 4.1432   3.7957   3.42435  3.12906  2.93673  2.84156     3.5596   3.77039  4.05656  4.25454  4.1432\n 3.89426  3.68533  3.4294   3.19634  3.04078  2.97687  …  3.77376  3.91104  4.02484  4.01809  3.89426\n 3.58222  3.51745  3.43849  3.32924  3.23847  3.20854     4.04214  3.98306  3.84268  3.68733  3.58222\n 3.29343  3.31364  3.39594  3.47037  3.50472  3.52292     4.21362  3.89431  3.59108  3.38209  3.29343\n 3.09196  3.1458   3.31501  3.54851  3.75422  3.83127     4.22214  3.75563  3.39722  3.17401  3.09196\n 3.00566  3.06935  3.2701   3.58074  3.90114  3.9819      4.20084  3.68804  3.31455  3.08674  3.00566\n 3.04423  3.10922  3.31751  3.64678  3.97237  3.95763  …  4.26112  3.73575  3.35713  3.12658  3.04423\n 3.21141  3.27493  3.48159  3.79824  4.04026  3.87689     4.43999  3.91013  3.52864  3.29575  3.21141\n 3.50966  3.57057  3.76957  4.04294  4.12123  3.80485     4.74724  4.21481  3.83108  3.59608  3.50966\n 3.94126  3.99755  4.17542  4.34153  4.17922  3.7457      5.18672  4.65231  4.26671  4.02985  3.94126\n 4.50712  4.54878  4.65267  4.57178  4.16056  3.67651     5.76121  5.22524  4.83809  4.59937  4.50712\n 5.19818  5.16962  5.02327  4.58794  4.04907  3.57489  …  6.47349  5.93619  5.54744  5.30505  5.19818","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"fig, ax = subplots(figsize=(8, 6));\nmeshgrid(x, y) = (repeat(x', length(y), 1), repeat(y, 1, length(x)));\nX, Y = meshgrid(grid_x, grid_y);\nlevels = 0:0.25:5;\nax.contour(X, Y, pmf, levels, colors=\"black\", alpha=1.0, linewidths=0.5);\npos = ax.contourf(X, Y, pmf, levels, alpha=0.8, cmap=get_cmap(\"viridis\")) # colormaps: viridis, plasma, inferno, magma, jet, hsv, terrain\ncbar = fig.colorbar(pos, ax=ax);\ncbar.ax.tick_params(labelsize=15);\nxlabel(L\"\\Phi [degree]\",fontsize=20);\nylabel(L\"\\Psi [degree]\",fontsize=20);\n\n# detailed options (if your prefer to change details)\nax.set(xlim=[-180, 180], ylim=[-180, 180]);\nax.tick_params(axis=\"both\", which=\"major\",labelsize=15);\nax.grid(linestyle=\"--\", linewidth=0.5);\ntight_layout();\n\nsavefig(\"free_energy_surface02.png\", dpi=350, bbox_inches=\"tight\");","category":"page"},{"location":"free_energy_surface/","page":"Free energy surface from MD data","title":"Free energy surface from MD data","text":"(Image: png)","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/#Installation-of-the-package","page":"Installation","title":"Installation of the package","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Julia version 1.6 or later is required.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"]add https://github.com/matsunagalab/MDToolbox.jl.git\nusing MDToolbox","category":"page"},{"location":"installation/#Docker-image","page":"Installation","title":"Docker image","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"A docker image for MDToolbox.jl is available,","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"## REPL\n$ docker run -it --rm -v \"$PWD\":/home/jovyan/work matsunagalab/mdtoolbox julia\n\n## JupyterLab\n$ docker run --rm -p 8888:8888 -e JUPYTER_ENABLE_LAB=yes -v \"$PWD\":/home/jovyan matsunagalab/mdtoolbox","category":"page"},{"location":"msm/#Makorv-state-models","page":"Makorv state models","title":"Makorv state models","text":"","category":"section"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmgenerate(nframe::Int, T, pi_i)","category":"page"},{"location":"msm/#MDToolbox.msmgenerate-Tuple{Int64, Any, Any}","page":"Makorv state models","title":"MDToolbox.msmgenerate","text":"msmgenerate(nframe::Int, T, pi_i)\n            states = zeros(typeof(nframe), nframe)\n\nRandomly samples a state trajectory from the the given transition matrix, and equilibrium probabilities of states. \n\nExamples\n\njulia> T, pi_i = msmtransitionmatrix(C)\njulia> states = msmgenerate(1000, T, pi_i)\n\n\n\n\n\n","category":"method"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmgenerate(nframe::Int, T, pi_i, emission)","category":"page"},{"location":"msm/#MDToolbox.msmgenerate-Tuple{Int64, Any, Any, Any}","page":"Makorv state models","title":"MDToolbox.msmgenerate","text":"msmgenerate(nframe, T, pi_i, emission) -> states, observations\n\nRandomly samples a state trajectory and observations from the given transition matrix, equilibrium probabilities of states, and emissions.\n\nExamples\n\njulia> T, pi_i = msmtransitionmatrix(C)\njulia> states, observations = msmgenerate(1000, T, pi_i, emission)\n\n\n\n\n\n","category":"method"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmcountmatrix(indexOfCluster; tau=1)","category":"page"},{"location":"msm/#MDToolbox.msmcountmatrix-Tuple{Any}","page":"Makorv state models","title":"MDToolbox.msmcountmatrix","text":"msmcountmatrix(indexOfCluster; tau=1) -> C::Matrix\n\nTransition count matrix from a sinlgle binned trajectory or a set of binned trajectories.  indexOfCluster is a vector or a set of vectors containing binned trajectorie(s).  Returns count matrix for transitions from state i to state j in a time step of tau. \n\nExamples\n\njulia> ta = mdload(\"ak.dcd\")\njulia> X = compute_distancemap(ta[\"atomname CA\"])\njulia> F = clusterkcenters(X)\njulia> c = msmcountmatrix(F.indexOfCluster, tau=10)\n\n\n\n\n\n","category":"method"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmtransitionmatrix(C; TOLERANCE=10^(-4), verbose=true)","category":"page"},{"location":"msm/#MDToolbox.msmtransitionmatrix-Tuple{Any}","page":"Makorv state models","title":"MDToolbox.msmtransitionmatrix","text":"msmtransitionmatrix(C; TOLERANCE=10^(-4), verbose=true) -> T::Matrix, p::Vector\n\nEstimate the transition probability matrix from count matrix C.  Detailed balance is implicitly imposed in the estimation. \n\nReturns the transition probability matrix and the equilibrium probabilities of states. \n\nExamples\n\njulia> ta = mdload(\"ak.dcd\")\njulia> X = compute_distancemap(ta[\"atomname CA\"])\njulia> F = clusterkcenters(X)\njulia> C = msmcountmatrix(F.indexOfCluster, tau=10)\njulia> T, p = msmtransitionmatrix(C)\n\nReferences\n\nThis routines uses the reversible maximum likelihood estimator described in \nK. A. Beauchamp, G. R. Bowman, T. J. Lane, L. Maibaum, I. S. Haque, and V. S. Pande, \nMSMBuilder2: Modeling Conformational Dynamics on the Picosecond to Millisecond Scale, \nJ. Chem. Theory Comput. 7, 3412 (2011).\n\n\n\n\n\n","category":"method"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmviterbi(observation, T, pi_i, emission)","category":"page"},{"location":"msm/#MDToolbox.msmviterbi-NTuple{4, Any}","page":"Makorv state models","title":"MDToolbox.msmviterbi","text":"msmviterbi(observation, T, p, emission) -> states::Vector\n\nViterbi algorithm estimates the most probable hidden state sequence from the observation data. observations is a set of observed vectors. T, p are the transition probabilities and equilibrium probabilities, respectively.  emission is a matrix whose rows correspond to states, and columns correspond to observations. \n\nReturns the transition probability matrix, the equilibrium probabilities of states,  and the emission probabilities (though the emission does not change). \n\nExamples\n\njulia> nframe = 1000\njulia> states, observations = msmgenerate(nframe, T, pi_i, emission)\njulia> states_estimated = msmviterbi(T, pi_i, emission, observation)\n\nReferences\n\nThe algorithm of this routines is based on the descriptions in PRML book by C. Bishop. \n\n\n\n\n\n","category":"method"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmbaumwelch(data_list, T0, pi_i0, emission0; TOLERANCE=10.0^(-4), MAXITERATION=Inf64)","category":"page"},{"location":"msm/#MDToolbox.msmbaumwelch-NTuple{4, Any}","page":"Makorv state models","title":"MDToolbox.msmbaumwelch","text":"msmbaumwelch(observations, T_init, p_init, emission_init; TOLERANCE=10.0^(-4), MAXITERATION=Inf64) -> T::Matrix, p::Vector, emission::Matrix\n\nBaum-Welch algorithm estimates the most probable transition probabilities from the given observation data.  In this function, detailed balance is implicitly imposed in the estimation,  so the equilibrium probabilities can be determined from the estimated transition probabilities.  Also, unlike the original Baum-Welch algorithm, the emission is NOT estimated in this function,  because the emission probabilites are usually known a priori in cases of molecular experiments.  observations is a set of observed vectors. T_init, p_init are initial transition probabilities and equilibrium probabilities, respectively.  emission_init is a matrix whose rows correspond to states, and columns correspond to observations. \n\nReturns the transition probability matrix, the equilibrium probabilities of states,  and the emission probabilities (though the emission does not change). \n\nExamples\n\njulia> ta = mdload(\"ak.dcd\")\njulia> X = compute_distancemap(ta[\"atomname CA\"])\njulia> F = clusterkcenters(X)\njulia> C = msmcountmatrix(F.indexOfCluster, tau=10)\njulia> T, p = msmtransitionmatrix(C)\n\nReferences\n\nThe algorithm of this routines is based on the descriptions in PRML book by C. Bishop. \n\n\n\n\n\n","category":"method"},{"location":"msm/","page":"Makorv state models","title":"Makorv state models","text":"msmplot(T; pi_i=nothing, x=nothing, y=nothing, filename=nothing, edgewidth_scale=3.0, arrow_scale=0.0001, nodesize=0.5, fontsize=10, names=[], dpi=100)","category":"page"},{"location":"msm/#MDToolbox.msmplot-Tuple{Any}","page":"Makorv state models","title":"MDToolbox.msmplot","text":"msmplot(T; pi_i=nothing, x=nothing, y=nothing, filename=nothing, \n        edgewidth_scale=10.0, arrow_scale=0.1, nodesize=0.5, fontsize=10, names=[], dpi=100)\n\nVisualize the graphical structure of the given Markov state model parameters.  T is a transition probability matrix whose elements Tij represents the probablity of transition from state i to j.  T should satisfy the detailed balance condition. pi_i is a vector whose elements are equilibrium probabilities of states.  x and y are X and Y coordinates of states, respectively. \n\nExamples\n\njulia> nstate = 5\njulia> T, pi_i = msmtransitionmatrix(rand(nstate, nstate))\njulia> x = rand(nstate); y = rand(nstate)\njulia> msmplot(T, pi_i=pi_i, x=x, y=y)\n\n\n\n\n\n","category":"method"},{"location":"getting_started01/#Input-and-Output","page":"Input and Output","title":"Input and Output","text":"","category":"section"},{"location":"getting_started01/","page":"Input and Output","title":"Input and Output","text":"Typical usages of I/O functions for MD files are shown in belows. ","category":"page"},{"location":"getting_started01/#PDB-files","page":"Input and Output","title":"PDB files","text":"","category":"section"},{"location":"getting_started01/","page":"Input and Output","title":"Input and Output","text":"# read pdb data and generate a new variable t whose type is TrjArray\nt = mdload(\"protein.pdb\")\n\n# after some editings\nmdsave(\"protein_edited.pdb\", t)","category":"page"},{"location":"getting_started01/#AMBER-files","page":"Input and Output","title":"AMBER files","text":"","category":"section"},{"location":"getting_started01/","page":"Input and Output","title":"Input and Output","text":"AMBER NetCDF trajectory file","category":"page"},{"location":"getting_started01/","page":"Input and Output","title":"Input and Output","text":"# pdb files can be used for obtaining topology information which is used in atom selections\nt = mdload(\"run.pdb\")\n\n# read AMBER NetCDF data and generate a new variable t whose type is TrjArray\n# the topology information can be attached by the option `top=t`\nt = mdload(\"run.nc\", top=t)\n\n# after some calculations\nmdsave(\"run_edited.nc\", t)","category":"page"},{"location":"getting_started01/#CHARMM/NAMD-files","page":"Input and Output","title":"CHARMM/NAMD files","text":"","category":"section"},{"location":"getting_started01/","page":"Input and Output","title":"Input and Output","text":"# read PSf data and generate a new variable t whose type is TrjArray\n# Although PSF file does not contain coordinates, topology information is used in atom selections\nt = mdload(\"run.psf\")\n# or if you don't have PSF files, pdb can be used to obtain topology information\nt = mdload(\"run.pdb\")\n\n# read dcd file and generate a new variable t whose type is TrjArray\n# the topology information can be attached by the option `top=t`\nt = mdload(\"run.dcd\", top=t)\n# after some calculations\nmdsave(\"run_edit.dcd\", t)","category":"page"},{"location":"getting_started01/#GROMACS-files","page":"Input and Output","title":"GROMACS files","text":"","category":"section"},{"location":"getting_started01/","page":"Input and Output","title":"Input and Output","text":"not available yet","category":"page"},{"location":"workflow_for_developers/#Workflow-for-developers","page":"Workflow for developers","title":"Workflow for developers","text":"","category":"section"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"This note explains typical workflows for developers who are interested in adding their own functions in MDToolbox.jl","category":"page"},{"location":"workflow_for_developers/#Setup-of-MDToolbox.jl-source-codes","page":"Workflow for developers","title":"Setup of MDToolbox.jl source codes","text":"","category":"section"},{"location":"workflow_for_developers/#.-Fork-the-MDToolbox.jl-repository.","page":"Workflow for developers","title":"1. Fork the MDToolbox.jl repository.","text":"","category":"section"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"Just press the fork button at GitHub https://github.com/matsunagalab/MDToolbox.jl to fork the repo. ","category":"page"},{"location":"workflow_for_developers/#.-Clone-(download)-the-forked-repository.","page":"Workflow for developers","title":"2. Clone (download) the forked repository.","text":"","category":"section"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"In the terminal, run the following command: ","category":"page"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"$ git clone https://github.com/your_account_name/MDToolbox.jl.git","category":"page"},{"location":"workflow_for_developers/#.-Add-the-downloaded-source-codes-as-developmental-codes-in-Julia","page":"Workflow for developers","title":"3. Add the downloaded source codes as developmental codes in Julia","text":"","category":"section"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"$ julia\njulia> \n# enter the package mode by pressing ]\npkg> develop /path/to/MDToolbox.jl\n# return to the REPL mode by pressing BACKSPACE or DELETE\njulia> using MDToolbox","category":"page"},{"location":"workflow_for_developers/#Workflow-for-adding-your-original-function","page":"Workflow for developers","title":"Workflow for adding your original function","text":"","category":"section"},{"location":"workflow_for_developers/#.-Edit-src/MDToolbox.jl","page":"Workflow for developers","title":"1. Edit src/MDToolbox.jl","text":"","category":"section"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"Suppose that your new function name is wham(), and the definition of wham() is now being coded in wham.jl.","category":"page"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"Then, let's write your original function name and filename in src/MDToolbox.jl file as follows:","category":"page"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"###\n\nexport wham\n\n###\ninclude(\"wham.jl\")","category":"page"},{"location":"workflow_for_developers/#.-Write-your-codes-in-wham.jl","page":"Workflow for developers","title":"2. Write your codes in wham.jl","text":"","category":"section"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"During the coding, it is recommended to execute test codes in your REPL or jupyter. Also, it is convenient to use Reivse package which enables you to modify codes, making changes active without restarting Julia.","category":"page"},{"location":"workflow_for_developers/","page":"Workflow for developers","title":"Workflow for developers","text":"julia> using Revise, MDToolbox\njulia> # run your test codes","category":"page"},{"location":"reduction/#Reductions","page":"Reductions","title":"Reductions","text":"","category":"section"},{"location":"reduction/","page":"Reductions","title":"Reductions","text":"clusterkcenters(t::AbstractMatrix, kcluster::Int; nReplicates::Int=10)","category":"page"},{"location":"reduction/#MDToolbox.clusterkcenters-Tuple{AbstractMatrix{T} where T, Int64}","page":"Reductions","title":"MDToolbox.clusterkcenters","text":"clusterkcenters(X::AbstractMatrix, kcluster::Int; nReplicates::Int=10) -> F\n\nPerform clustering with K-center algorithm. Input data X should belong to AbstractMatrix type  and its columns corresponds to variables, rows are frames. Also, the number of clusters kcluster should be specified. \n\nReturns a NamedTuple object F which contains cluster index for each sample in F.indexOfCluster, the coordinates of cluster centers in F.center, the indices of cluster centers in F.indexOfCenter,  and distances of samples from the nearest centers in F.distanceFromCenter.\n\nExample\n\njulia> using MDToolbox, Plots\njulia> X = rand(1000, 2)\njulia> F = clusterkcenters(X, 3)\njulia> scatter(X[:, 1], X[:, 2], c=F.indexOfCluster)\n\nReferences\n\nThis function uses the method described in\n[1] S. Dasgupta and P. M. Long, J. Comput. Syst. Sci. 70, 555 (2005).\n[2] J. Sun, Y. Yao, X. Huang, V. Pande, G. Carlsson, and L. J. Guibas, Learning 24, 2 (2009).\n\n\n\n\n\n","category":"method"},{"location":"reduction/","page":"Reductions","title":"Reductions","text":"clusterkcenters(ta::TrjArray, kcluster::Int; nReplicates::Int=10)","category":"page"},{"location":"reduction/#MDToolbox.clusterkcenters-Tuple{TrjArray, Int64}","page":"Reductions","title":"MDToolbox.clusterkcenters","text":"clusterkcenters(ta::AbstractMatrix, kcluster::Int; nReplicates::Int=10) -> F\n\nPerform clustering with K-center algorithm for a TrjArray variable ta.\n\n\n\n\n\n","category":"method"},{"location":"reduction/","page":"Reductions","title":"Reductions","text":"compute_cov(X::AbstractMatrix; lagtime::Int=0)","category":"page"},{"location":"reduction/#MDToolbox.compute_cov-Tuple{AbstractMatrix{T} where T}","page":"Reductions","title":"MDToolbox.compute_cov","text":"compute_cov(ta::AbstractMatrix, lagtime::Int=0) -> cov\n\nCompute a variance-covariance or time-lagged covariance matrix from input data X Input data X should belong to AbstractMatrix type and its columns corresponds to variables, rows are frames. Optional input is the lagtime=lagtime for the calculation of the covariance matrix (default is lagtime=0). \n\nExample\n\njulia> X = rand(1000, 100)\njulia> cov = compute_cov(X)\n\n\n\n\n\n","category":"method"},{"location":"reduction/","page":"Reductions","title":"Reductions","text":"rsvd(A::AbstractMatrix, k::Number=10)","category":"page"},{"location":"reduction/#MDToolbox.rsvd","page":"Reductions","title":"MDToolbox.rsvd","text":"rsvd(X::AbstractMatrix; k::Number=10) -> F\n\nPerform the randomized SVD for input data X. Input data X should belong to AbstractMatrix type and its columns corresponds to variables, rows are frames.  Users can specify the dimension k of subspace onto which the data is randomly projected (by default k=10). \n\nReturns a NamedTuple object F whose members are same as usual SVD, F.V, F.S, F.U. \n\nExample\n\njulia> X = randn(rand(1000, 10))\njulia> F = rsvd(X)\n\nReferences\n\nHalko, Nathan, Per-Gunnar Martinsson, and Joel A. Tropp. \n\"Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions.\" \nSIAM review 53.2 (2011): 217-288.\n\n\n\n\n\n","category":"function"},{"location":"reduction/","page":"Reductions","title":"Reductions","text":"pca(X::AbstractMatrix; k=nothing)","category":"page"},{"location":"reduction/#MDToolbox.pca-Tuple{AbstractMatrix{T} where T}","page":"Reductions","title":"MDToolbox.pca","text":"pca(X::AbstractMatrix; k=dimension) -> F\n\nPerform principal component analysis (PCA). PCA captures degrees of freedom which have the largest variances. Input data X should belong to AbstractMatrix type and its columns corresponds to variables, rows are frames. \n\nReturns a NamedTuple object F which contains the principal components in F.projection,  the prncipal modes in the columns of the matrix F.mode, and the variances of principal components in F.variance. \n\nIf k=dimension is specified, the randomized SVD is used for reducing memory.  This algorithm first project the data into a randomly selected k+2-dimensional space,  then PCA is performed in the projected data. See the references for details.  Note that if the dimension of X is larger than 5000, the randomized SVD is forcibly used with k=1000. \n\nExample\n\njulia> using MDToolbox, Plots, Statistics\njulia> X = cumsum(rand(1000, 10))\njulia> F = pca(X)\njulia> plot(F.projection[:, 1], F.projection[:, 2])\n\nReferences\n\nHalko, N., Martinsson, P.-G., Shkolnisky, Y. & Tygert, M. \nAn Algorithm for the Principal Component Analysis of Large Data Sets. \nSIAM J. Sci. Comput. 33, 2580–2594 (2011).\n\n\n\n\n\n","category":"method"},{"location":"reduction/","page":"Reductions","title":"Reductions","text":"tica(X::AbstractMatrix, lagtime::Int=1)","category":"page"},{"location":"reduction/#MDToolbox.tica","page":"Reductions","title":"MDToolbox.tica","text":"tica(X::AbstractMatrix, lagtime::Int=1) -> F\n\nThis routine performs time-structure based Independent Component Analysis (tICA). tICA captures degrees of freedom which are most important in the sense that their motions are very slow. X belongs to AbstractMatrix type and its columns corresponds to variables, rows are frames.  User should specify the lagtime for the calculation of the time-lagged covariance matrix.  Returns a NamedTuple object F which contains independent components in F.projection,  the independent modes in the columns of the matrix F.mode, and the eigenvalues in F.variance. \n\nIf the dimension of X is larger than 5000, the randomized SVD approximation is forcibly used with k=1000 to reduce memory. \n\nExample\n\njulia> using MDToolbox, Plots, Statistics\njulia> X = cumsum(rand(1000, 10))\njulia> F = tica(X, 10)\njulia> plot(F.projection[:, 1], F.projection[:, 2])\n\nReferences\n\nNaritomi, Y. & Fuchigami, S. \nSlow dynamics in protein fluctuations revealed by time-structure based independent component analysis: \nThe case of domain motions. \nThe Journal of Chemical Physics 134, 065101 (2011).\n\n\n\n\n\n","category":"function"},{"location":"getting_started02/#TrjArray-type","page":"TrjArray type","title":"TrjArray type","text":"","category":"section"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"MDToolbox.jl introduces a unique type, called TrjArray, for storing and processing MD trajectory data.  When you load MD data with mdload(), mdload() always generates a new variable with TrjArray type. Alternatively, a TrjArray-type variable can be manually generated by calling its constructor.","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"using MDToolbox\nENV[\"COLUMNS\"] = 130; # if you are using Jupyter, the column width should be set for the message width from MDToolbox.jl.\n\n# A TrjArray variable generated by loading MD data\nt = mdload(\"examples/data/md_alad/3_prod/run.nc\");\n\n# Generate a TrjArray by calling its constructor. Here, single atom and its nine-frame coordinates are given. \nt = TrjArray(xyz=rand(10, 3));","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"TrjArray displays the information of its topology and trajectory on the standard ouput for users. For example, the following are the outputs from TrjArray just after loading a pdb file. ","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"t = mdload(\"examples/data/3gb1.pdb\")\n    32x855 TrjArray{Float64, Int64}\n    | A                          | A                          |  …   A                          |\n    | 1MET                       | 1MET                       |  …   56GLU                      |\n    | 1N                         | 2CA                        |  …   855HG3                     |\n    |   -13.15    -1.71     5.51 |   -12.20    -2.85     5.70 |  …      10.24     2.24    -4.53 |\n    |   -13.16    -2.75     4.19 |   -12.38    -3.43     5.26 |         10.29     1.79    -3.20 |\n    |   -13.26    -2.20     5.12 |   -12.23    -3.26     5.29 |         11.09     3.24    -6.13 |\n    |   -12.45    -4.30     6.28 |   -12.25    -3.22     5.28 |         11.75     2.57    -3.31 |\n    |   -13.05    -1.52     5.31 |   -12.15    -2.68     5.56 |         10.46     1.51    -3.50 |\n    |   -12.98    -3.74     6.65 |   -12.43    -3.31     5.34 |  …      11.26     3.06    -3.59 |\n    |   -13.03    -2.10     3.64 |   -12.47    -2.79     4.83 |         10.38     1.53    -3.30 |\n    |   -13.00    -2.17     5.21 |   -12.09    -3.19     5.78 |         11.32     3.37    -5.78 |\n    |   -12.57    -2.96     3.87 |   -12.12    -3.42     5.21 |         10.36     1.38    -3.53 |\n    |   -12.60    -2.85     4.27 |   -12.16    -3.02     5.68 |         10.44     1.40    -3.37 |\n    |   -13.12    -1.61     4.72 |   -12.34    -2.60     5.52 |  …      10.96     3.58    -5.68 |\n    |             ⋮              |             ⋮              |  ⋱               ⋮              |\n    |   -13.46    -2.54     6.05 |   -12.41    -3.14     5.18 |         10.33     1.63    -3.72 |\n    |   -12.61    -4.31     6.34 |   -12.22    -3.51     5.15 |         10.26     1.56    -3.59 |\n    |   -13.24    -2.72     6.28 |   -12.16    -3.34     5.45 |         11.30     2.91    -3.41 |\n    |   -13.21    -2.29     5.61 |   -12.13    -3.31     5.53 |         11.76     2.84    -5.65 |\n    |   -12.75    -2.42     4.33 |   -12.22    -2.96     5.61 |  …      11.53     3.05    -5.67 |\n    |   -13.32    -2.12     5.10 |   -12.27    -3.17     5.25 |         10.38     1.88    -3.32 |\n    |   -13.07    -2.31     4.32 |   -12.27    -3.22     5.19 |         11.65     3.11    -5.90 |\n    |   -12.76    -3.69     6.68 |   -12.11    -3.33     5.38 |         11.51     2.97    -5.63 |\n    |   -13.21    -2.55     5.53 |   -12.06    -3.41     5.11 |         10.26     1.60    -3.20 |\n    |   -13.13    -2.12     4.11 |   -12.34    -3.00     5.02 |  …      12.68     3.28    -4.88 |\n    |   -12.81    -2.86     4.32 |   -12.23    -3.33     5.62 |          9.98     2.33    -5.34 |","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"Here, the first three rows display the topology information contained in the TrjArray-type variable t. The 1st row shows chain IDs and names.  The 2nd row shows residue IDs and names. The 3rd row shows atom IDs and names. ","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"The rest of the rows are the XYZ coordinates of atoms. The rows represent frames of the trajectory. So, the coordinates of each structure are contained in the respective row. ","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"Users can directly access the topology and trajectory data contained in a TrjArray-type variable. For example, atom names can be accessed from t.atomname","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"t.atomname\n    855-element Vector{String}:\n    \"N\"\n    \"CA\"\n    \"C\"\n    \"O\"\n    ⋮\n    \"HB2\"\n    \"HB3\"\n    \"HG2\"\n    \"HG3\"","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"Likewise, residue names can be accessed from t.resname","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"t.resid\n    855-element Vector{Int64}:\n      1\n      1\n      1\n      1\n      ⋮\n     56\n     56\n     56\n     56","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"XYZ coordinates of atoms at every frames are stored in t.xyz as a Matrix (2-dimensional Array). ","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"t.xyz\n  32×2565 Array{Float64,2}:\n   -13.148  -1.712  5.506  -12.204  -2.845  5.703  -10.787  …  -5.015  11.4    2.981  -5.635  10.243  2.242  -4.528\n   -13.157  -2.751  4.188  -12.383  -3.431  5.265  -11.062     -4.948  10.403  2.845  -4.607  10.289  1.786  -3.203\n   -13.263  -2.198  5.124  -12.234  -3.262  5.291  -10.878     -3.987  12.803  2.829  -6.066  11.088  3.244  -6.129\n   -12.447  -4.303  6.284  -12.247  -3.222  5.278  -10.903     -5.088  10.448  1.461  -3.727  11.753  2.573  -3.312\n   -13.048  -1.516  5.314  -12.149  -2.68   5.56   -10.728     -5.194  10.528  2.313  -5.067  10.462  1.511  -3.498\n     ⋮                                      ⋮               ⋱                  ⋮                             \n   -12.758  -3.689  6.677  -12.112  -3.327  5.385  -10.767     -3.783  13.174  2.414  -5.77   11.507  2.972  -5.631\n   -13.206  -2.549  5.527  -12.063  -3.411  5.11   -10.744     -5.049  10.311  2.8    -4.493  10.257  1.6    -3.201\n   -13.127  -2.119  4.107  -12.343  -3.001  5.019  -10.998  …  -4.007  11.853  2.636  -6.3    12.676  3.277  -4.88\n   -12.809  -2.858  4.322  -12.235  -3.325  5.615  -10.889     -5.346  10.808  2.939  -3.91    9.983  2.325  -5.343","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"Here, a row vector are the XYZ coordinates of atoms in order","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"x(1) y(1) z(1) x(2) y(2) z(2) .. x(natom) y(natom) z(natom)","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"The rows represent frames in the trajectory. For typical MD simulation data, frames are time steps of recorded atomic coordinates. ","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"For example, the translation of the X coordinates of the system at the 3rd frame can be accessed as follows,","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"t.xyz[3, 1:3:end]\n  855-element Array{Float64,1}:\n   -13.263\n   -12.234\n   -10.878\n   -10.574\n   -12.144\n     ⋮\n    10.754\n    12.452\n    12.803\n    11.088","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"TrjArray containes the following variables:","category":"page"},{"location":"getting_started02/","page":"TrjArray type","title":"TrjArray type","text":"variable name type content\nnatom Int The number of atoms\nnframe Int The number of frames or structures\nxyz nframe x (natom*3) Matrix{Float} XYZ coordinates of atoms\nboxsize nframe x 3 Matrix{Float} XYZ size of simulation box\nchainname natom Vector{String} Chain names\nchainid natom Vector{Int} Chain IDs\nresname natom Vector{String} Resisude names\nresid natom Vector{Int} Residue IDs\natomname natom Vector{String} Atom names\natomid natom Vector{Int} Atom IDs\nmass natom Vector{Float} Masses\nradius natom Vector{Float} VDW radii of atoms\ncharge natom Vector{Float} Partial chages of atoms\nsasa natom Vector{Float} Solvent accessible surface areas\nlist_bond nbond x 2 Matrix{Int} Atom ID pairs for bonds\nlist_angle nangle x 2 Matrix{Int} Atom ID triples for angles\nlist_dihedral ndihedral x 2 Matrix{Int} Atom ID quadruplets for dihedrals\nlist_improper nimproper x 2 Matrix{Int} Atom ID quadruplets for impropers\nlist_cmap ncmap x 2 Matrix{Int} Atom ID quadruplets for cmaps","category":"page"},{"location":"wham_example/#WHAM-(Weighted-Histogram-Analysis-Method)","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"","category":"section"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"using PyPlot, StatsBase, Printf, DelimitedFiles, MDToolbox\nPyPlot.plt.style.use(\"seaborn-colorblind\");\nENV[\"COLUMNS\"] = 110; #display width for MDToolbox","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# constants\nKBT = KB_kcalpermol*300.0","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"0.59616123","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# umbrella window centers\numbrella_center = 0:3:180\nK = length(umbrella_center)","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"61","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# define edges for histogram bin\nM = 80; # number of bins\nedge = range(-1, stop=181, length=M+1)\n#edge = linspace(-1, 181, M+1)\nbin_center = 0.5 .* (edge[2:end] .+ edge[1:(end-1)])","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"0.1375:2.275:179.8625","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# read dihedral angle data\ndata_k = []\nfor k = 1:K\n  filename = @sprintf \"data/umbrella_alat/3_prod/run_%d.dat\" umbrella_center[k]\n  x = readdlm(filename);\n  push!(data_k, x[:, 2])\nend","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# calculate histogram (h_km)\n# h_km: histogram (data counts) of k-th umbrella data counts in m-th data bin\nh_km = zeros(Int64, K, M)\nfor k = 1:K\n  h = fit(Histogram, data_k[k], edge)\n  h_m = h.weights\n  h_km[k, :] = h_m\nend","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# bias-energy\n# bias_km: bias-factor of k-th umbrella-window evaluated at m-th bin-center\nfunction minimum_image(center, x)\n  dx = x .- center\n  dx = dx .- round.(dx./360.0).*360.0;\n  dx\nend\n\nbias_km = zeros(Float64, K, M)\nspring_constant = 200.0 * (pi/180.0)^2; # conversion of the unit from kcal/mol/rad^2 to kcal/mol/deg^2\nfor k = 1:K\n  for m = 1:M\n    #bias_km[k, m] = (spring_constant./KBT) * (minimum_image(Float64(umbrella_center[k]), bin_center[m])).^2\n    bias_km[k, m] = (spring_constant./KBT) * (Float64(umbrella_center[k]) - bin_center[m]).^2\n  end\nend","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"# solve WHAM equations, and\n# calculate probabilities in the dihedral angle space, and evaluate the potential of mean force (PMF)\nf_k, pmf_m = wham(h_km, bias_km)\npmf_m = KBT .* pmf_m;\npmf_m = pmf_m .- pmf_m[1]","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"1×80 Matrix{Float64}:\n 0.0  -0.0169813  0.0474963  0.00841217  0.119576  …  -6.87585  -7.06385  -7.13125  -7.21599  -7.13709","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"using JLD2\n@save \"wham.jld2\" bin_center pmf_m","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"fig, ax = subplots(figsize=(8, 6))\nax.plot(bin_center, pmf_m[:], linewidth=3)\nxlabel(\"Angle [degree]\",fontsize=20)\nylabel(\"Potential of mean force [kcal/mol]\",fontsize=20)\n\n# detailed options (if your prefer to change details)\nax.set(xlim=[-1, 181], ylim=[-8, 12])\nax.xaxis.set_tick_params(which=\"major\",labelsize=15)\nax.yaxis.set_tick_params(which=\"major\",labelsize=15)\nax.grid(linestyle=\"--\", linewidth=0.5)\ntight_layout()\n\nsavefig(\"wham.png\", dpi=350)","category":"page"},{"location":"wham_example/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"(Image: png)","category":"page"},{"location":"fileio/#File-IO","page":"File IO","title":"File IO","text":"","category":"section"},{"location":"fileio/","page":"File IO","title":"File IO","text":"mdload(filename::AbstractString; index=nothing, top=nothing)","category":"page"},{"location":"fileio/#MDToolbox.mdload-Tuple{AbstractString}","page":"File IO","title":"MDToolbox.mdload","text":"mdload(filename::AbstractString; index=nothing, top::TrjArray=nothing) -> ta::TrjArray\n\nFunction for reading bimolecular structure files or molecular dynamics trajectories. This function automatically detects files types from the filename extension of input filename. Currently, PDB, PSF, DCD, NetCDF, and namdbin(namd restart file) formats are available. For reading subset atoms from the trajectory files, the user can specify atom indices as index::AbstractVector{Int}. Returns a TrjArray variable ta.\n\nIf the user wants to attach a topology information read from PSF, PDB, or other files to MD trajectory, the user can give an addtional option top=ta:TrjArray. If the option is given the topology information is applied.\n\nExample\n\njulia> ta = mdload(\"1ake.psf\")\njulia> ta = mdload(\"1ake.dcd\", top=ta)\n\n\n\n\n\n","category":"method"},{"location":"fileio/","page":"File IO","title":"File IO","text":"mdsave(filename::AbstractString, ta::TrjArray)","category":"page"},{"location":"fileio/#MDToolbox.mdsave-Tuple{AbstractString, TrjArray}","page":"File IO","title":"MDToolbox.mdsave","text":"mdsave(filename::AbstractString, ta::TrjArray)\n\nFunction for writing bimolecular structure files or molecular dynamics trajectories. This function automatically detects files types from the filename extension of input filename. Currently, PDB, PSF, NetCDF, and namdbin(namd restart file) formats are available.\n\nExample\n\njulia> ta = TrjArray(xyz=randn(100, 9))\njulia> ta = mdsave(\"1ake.nc\", ta)\n\n\n\n\n\n","category":"method"},{"location":"getting_started03/#Atom-selection","page":"Atom selection","title":"Atom selection","text":"","category":"section"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"Using TrjArray-type for storing MD trajectory data, users can flexibly select specific atoms and their trajectory data.  Users can select atoms as like slicing arrays from the buit-in Array type in Julia. ","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"using MDToolbox\nENV[\"COLUMNS\"] = 130; # if you are using Jupyter, the column width should be set for the message width from MDToolbox.jl\n\nt = mdload(\"examples/data/3gb1.pdb\")\n    32x855 TrjArray{Float64, Int64}\n    | A                          | A                          |  …   A                          |\n    | 1MET                       | 1MET                       |  …   56GLU                      |\n    | 1N                         | 2CA                        |  …   855HG3                     |\n    |   -13.15    -1.71     5.51 |   -12.20    -2.85     5.70 |  …      10.24     2.24    -4.53 |\n    |   -13.16    -2.75     4.19 |   -12.38    -3.43     5.26 |         10.29     1.79    -3.20 |\n    |   -13.26    -2.20     5.12 |   -12.23    -3.26     5.29 |         11.09     3.24    -6.13 |\n    |   -12.45    -4.30     6.28 |   -12.25    -3.22     5.28 |         11.75     2.57    -3.31 |\n    |   -13.05    -1.52     5.31 |   -12.15    -2.68     5.56 |         10.46     1.51    -3.50 |\n    |   -12.98    -3.74     6.65 |   -12.43    -3.31     5.34 |  …      11.26     3.06    -3.59 |\n    |   -13.03    -2.10     3.64 |   -12.47    -2.79     4.83 |         10.38     1.53    -3.30 |\n    |   -13.00    -2.17     5.21 |   -12.09    -3.19     5.78 |         11.32     3.37    -5.78 |\n    |   -12.57    -2.96     3.87 |   -12.12    -3.42     5.21 |         10.36     1.38    -3.53 |\n    |   -12.60    -2.85     4.27 |   -12.16    -3.02     5.68 |         10.44     1.40    -3.37 |\n    |   -13.12    -1.61     4.72 |   -12.34    -2.60     5.52 |  …      10.96     3.58    -5.68 |\n    |             ⋮              |             ⋮              |  ⋱               ⋮              |\n    |   -13.46    -2.54     6.05 |   -12.41    -3.14     5.18 |         10.33     1.63    -3.72 |\n    |   -12.61    -4.31     6.34 |   -12.22    -3.51     5.15 |         10.26     1.56    -3.59 |\n    |   -13.24    -2.72     6.28 |   -12.16    -3.34     5.45 |         11.30     2.91    -3.41 |\n    |   -13.21    -2.29     5.61 |   -12.13    -3.31     5.53 |         11.76     2.84    -5.65 |\n    |   -12.75    -2.42     4.33 |   -12.22    -2.96     5.61 |  …      11.53     3.05    -5.67 |\n    |   -13.32    -2.12     5.10 |   -12.27    -3.17     5.25 |         10.38     1.88    -3.32 |\n    |   -13.07    -2.31     4.32 |   -12.27    -3.22     5.19 |         11.65     3.11    -5.90 |\n    |   -12.76    -3.69     6.68 |   -12.11    -3.33     5.38 |         11.51     2.97    -5.63 |\n    |   -13.21    -2.55     5.53 |   -12.06    -3.41     5.11 |         10.26     1.60    -3.20 |\n    |   -13.13    -2.12     4.11 |   -12.34    -3.00     5.02 |  …      12.68     3.28    -4.88 |\n    |   -12.81    -2.86     4.32 |   -12.23    -3.33     5.62 |          9.98     2.33    -5.34 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"First, specific frames of TrjArray variable can be selected by row indices. For example, the 3rd to 5th frames can be sliced by,","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[3:5, :]\n    3x855 TrjArray{Float64,Int64}\n    | A                          | A                          |  …   A                          |\n    | 1MET                       | 1MET                       |  …   56GLU                      |\n    | 1N                         | 2CA                        |  …   855HG3                     |\n    |   -13.26    -2.20     5.12 |   -12.23    -3.26     5.29 |  …      11.09     3.24    -6.13 |\n    |   -12.45    -4.30     6.28 |   -12.25    -3.22     5.28 |         11.75     2.57    -3.31 |\n    |   -13.05    -1.52     5.31 |   -12.15    -2.68     5.56 |         10.46     1.51    -3.50 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"Next, specific atoms of TrjArray variable can be selected by column indices. For example, the 1st to 3rd atoms can be sliced by,","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[:, 1:3]\n    32x3 TrjArray{Float64,Int64}\n    | A                          | A                          | A                          |\n    | 1MET                       | 1MET                       | 1MET                       |\n    | 1N                         | 2CA                        | 3C                         |\n    |   -13.15    -1.71     5.51 |   -12.20    -2.85     5.70 |   -10.79    -2.30     5.87 |\n    |   -13.16    -2.75     4.19 |   -12.38    -3.43     5.26 |   -11.06    -2.70     5.50 |\n    |   -13.26    -2.20     5.12 |   -12.23    -3.26     5.29 |   -10.88    -2.62     5.57 |\n    |             ⋮              |             ⋮              |             ⋮              |\n    |   -13.21    -2.55     5.53 |   -12.06    -3.41     5.11 |   -10.74    -2.72     5.46 |\n    |   -13.13    -2.12     4.11 |   -12.34    -3.00     5.02 |   -11.00    -2.35     5.33 |\n    |   -12.81    -2.86     4.32 |   -12.23    -3.33     5.62 |   -10.89    -2.63     5.85 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"Of couse, both frame and atom selections can be specified together, ","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[3:5, 1:3]\n    3x3 TrjArray{Float64,Int64}\n    | A                          | A                          | A                          |\n    | 1MET                       | 1MET                       | 1MET                       |\n    | 1N                         | 2CA                        | 3C                         |\n    |   -13.26    -2.20     5.12 |   -12.23    -3.26     5.29 |   -10.88    -2.62     5.57 |\n    |   -12.45    -4.30     6.28 |   -12.25    -3.22     5.28 |   -10.90    -2.54     5.53 |\n    |   -13.05    -1.52     5.31 |   -12.15    -2.68     5.56 |   -10.73    -2.16     5.80 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"Also, atoms can be selected by strings. For example, residue ID == 10 can be selected by","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[:, \"resid 10\"]\n    32x22 TrjArray{Float64,Int64}\n    | A                          | A                          |  …   A                          |\n    | 10LYS                      | 10LYS                      |  …   10LYS                      |\n    | 1N                         | 2CA                        |  …   22HZ3                      |\n    |    14.51     1.47    -1.06 |    15.96     1.11    -0.95 |  …      15.72     3.47    -6.83 |\n    |    14.34     0.95    -1.15 |    15.79     0.64    -1.11 |         18.17     4.93    -4.94 |\n    |    14.53     1.21    -1.25 |    15.98     0.88    -1.17 |         13.99     4.58    -3.58 |\n    |             ⋮              |             ⋮              |  ⋱               ⋮              |\n    |    14.35     1.24    -1.20 |    15.81     0.95    -1.20 |         14.40     4.35    -5.36 |\n    |    14.48     1.14    -1.19 |    15.92     0.79    -1.15 |  …      18.17     5.89    -5.06 |\n    |    14.56     1.13    -1.20 |    16.01     0.83    -1.11 |         14.94     2.44    -7.45 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"The colon in the row can be omitted,","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[\"resid 10\"]\n    32x22 TrjArray{Float64,Int64}\n    | A                          | A                          |  …   A                          |\n    | 10LYS                      | 10LYS                      |  …   10LYS                      |\n    | 1N                         | 2CA                        |  …   22HZ3                      |\n    |    14.51     1.47    -1.06 |    15.96     1.11    -0.95 |  …      15.72     3.47    -6.83 |\n    |    14.34     0.95    -1.15 |    15.79     0.64    -1.11 |         18.17     4.93    -4.94 |\n    |    14.53     1.21    -1.25 |    15.98     0.88    -1.17 |         13.99     4.58    -3.58 |\n    |             ⋮              |             ⋮              |  ⋱               ⋮              |\n    |    14.35     1.24    -1.20 |    15.81     0.95    -1.20 |         14.40     4.35    -5.36 |\n    |    14.48     1.14    -1.19 |    15.92     0.79    -1.15 |  …      18.17     5.89    -5.06 |\n    |    14.56     1.13    -1.20 |    16.01     0.83    -1.11 |         14.94     2.44    -7.45 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"Ranges can be specified using colons. For example, residue IDs rom 10 to 13 can be selected by","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[\"resid 10:13\"]\n32x77 TrjArray{Float64,Int64}\n| A                          | A                          |  …   A                          |\n| 10LYS                      | 10LYS                      |  …   13LYS                      |\n| 1N                         | 2CA                        |  …   77HZ3                      |\n|    14.51     1.47    -1.06 |    15.96     1.11    -0.95 |  …      15.42    -3.79     2.49 |\n|    14.34     0.95    -1.15 |    15.79     0.64    -1.11 |         16.92    -1.15     2.36 |\n|    14.53     1.21    -1.25 |    15.98     0.88    -1.17 |         14.80    -0.42     7.32 |\n|             ⋮              |             ⋮              |  ⋱               ⋮              |\n|    14.35     1.24    -1.20 |    15.81     0.95    -1.20 |         16.18    -2.37     2.19 |\n|    14.48     1.14    -1.19 |    15.92     0.79    -1.15 |  …      12.10    -4.45     4.27 |\n|    14.56     1.13    -1.20 |    16.01     0.83    -1.11 |         16.27    -3.58     4.58 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"Not only IDs, names can be specified. For example, residue name of GLU ASP can be selected by","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[\"resname GLU ASP\"]\n32x136 TrjArray{Float64,Int64}\n| A                          | A                          |  …   A                          |\n| 15GLU                      | 15GLU                      |  …   56GLU                      |\n| 1N                         | 2CA                        |  …   136HG3                     |\n|     5.87    -0.14     7.35 |     4.52    -0.66     6.99 |  …      10.24     2.24    -4.53 |\n|     5.97    -0.41     7.47 |     4.59    -0.80     7.07 |         10.29     1.79    -3.20 |\n|     5.82    -0.05     7.35 |     4.47    -0.58     6.99 |         11.09     3.24    -6.13 |\n|             ⋮              |             ⋮              |  ⋱               ⋮              |\n|     5.95    -0.37     7.62 |     4.60    -0.89     7.26 |         10.26     1.60    -3.20 |\n|     5.96    -0.12     7.34 |     4.61    -0.66     7.02 |  …      12.68     3.28    -4.88 |\n|     5.91    -0.11     7.29 |     4.54    -0.56     6.92 |          9.98     2.33    -5.34 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"These can be combined by using and, or, and brackets (). For example, C_alpha atoms of residue IDs from 1 to 20 can be selected by,","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"t[\"atomname CA and resid 1:20\"]\n    32x20 TrjArray{Float64,Int64}\n    | A                          | A                          |  …   A                          |\n    | 1MET                       | 2THR                       |  …   20ALA                      |\n    | 1CA                        | 2CA                        |  …   20CA                       |\n    |   -12.20    -2.85     5.70 |    -8.56    -2.53     6.83 |  …     -11.12     2.18     3.06 |\n    |   -12.38    -3.43     5.26 |    -8.87    -2.64     6.54 |        -11.10     2.14     3.34 |\n    |   -12.23    -3.26     5.29 |    -8.72    -2.69     6.68 |        -11.29     2.23     3.10 |\n    |             ⋮              |             ⋮              |  ⋱               ⋮              |\n    |   -12.06    -3.41     5.11 |    -8.63    -2.73     6.65 |        -11.07     2.11     3.15 |\n    |   -12.34    -3.00     5.02 |    -8.86    -2.42     6.49 |  …     -11.11     2.25     3.12 |\n    |   -12.23    -3.33     5.62 |    -8.71    -2.59     6.92 |        -11.02     2.10     3.14 |","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"The following keywords are avaiable for atom selections by strings","category":"page"},{"location":"getting_started03/","page":"Atom selection","title":"Atom selection","text":"keywords description examples\nchainname specify chain names chainname A chainname A B\nchainid specify chain IDs chainid 1  chainid 1:3 chainid 1:3 5\nresname specify residue names resname ARG resname GLU ASP\nresid specify residue IDs resid 1 resid 1:3 resid 1:3 5\natomname specify atom names atomname CA atomname C N O CA\natomid specify atom IDs atomid 1 atomid 1:3 atomid 1:3 5\nprotein select proteins protein\nsolvent select solvents solvent\nwater select water molecues water\nhydrogen select hydrogens hydrogen","category":"page"},{"location":"structure/#Structural-computations","page":"Structural computations","title":"Structural computations","text":"","category":"section"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"centerofmass(ta::TrjArray{T, U}; isweight::Bool=true, index::AbstractVector=Vector{U}(undef, 0)) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.centerofmass-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.centerofmass","text":"centerofmass(ta::TrjArray; isweight=true, index::Union{UnitRange,Vector,BitArray}) -> com::TrjArray\n\nCalculates the center of mass coordinates (COM) of the given trajectory, a TrjArray object ta.  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty). Uses can also specify column indices for the COM calculation by giving index which should be a Vector of integers, a UnitRange, or a BiArray. \n\nReturns the center of mass coordinates as a TrjArray object, which have virtual single \"atom\" whose coordinates are COMs. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> com = centersofmass(ta)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"decenter(ta::TrjArray{T, U}; isweight::Bool=true, index::AbstractVector=Vector{Int64}(undef, 0)) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.decenter-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.decenter","text":"decenter(ta::TrjArray; isweight=true, index::Union{UnitRange,Vector,BitArray}) -> ta_decentered::TrjArray, com::TrjArray\n\nCalculates the centers of mass coordinates (COM) of the given trajectory, a TrjArray object ta. And translates the coordinates so that the COM of the output is identical to the origin (x=y=z=0).  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty). Uses can also specify column indices for the COM calculation by giving index which should be a Vector of integers, a UnitRange, or a BiArray. \n\nReturns a TrjArray object whose COM is the origin (x=y=z=0), and the COM of the given TrjArray ta. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta_decentered = decenter(ta)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"decenter!(ta::TrjArray{T, U}; isweight::Bool=true, index::AbstractVector=Vector{Int64}(undef, 0)) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.decenter!-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.decenter!","text":"decenter!(ta::TrjArray; isweight=true, index::Union{UnitRange,Vector,BitArray}) -> com::TrjArray\n\nTranslates the coordinates of the given trajectory, a TrjArray ta,  so that the COM of it become identical to the origin (x=y=z=0).  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty). Uses can also specify column indices for the COM calculation by giving index which should be an Array of integers. \n\nReturns the center of mass coordinates of the given trajectory. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> decenter!(ta)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"orient!(ta::TrjArray{T, U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.orient!-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.orient!","text":"orient!(ta::TrjArray)\n\nOrient the molecule using its principal axes of inertia. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> orient!(ta)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"rotate(ta::TrjArray{T, U}, quater::AbstractVector{T}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.rotate-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, AbstractVector{T}}} where {T, U}","page":"Structural computations","title":"MDToolbox.rotate","text":"rotate(ta::TrjArray, quaternion::Vector) -> ta_rotated::TrjArray\n\nPerforms rotation of coordinates of the given TrjArray object ta.  Rotation matrix is constructed fromt the given quaternion vector. \n\nReturns the trajecotry with rotated coordinates.\n\nExample\n\njulia> ta = mdload(\"ak.dcd\")\njulia> quaternion = [0.80951112,  0.10657412,  0.35146912,  0.45804312]\njulia> ta_rotated = rotate(ta, quaternion)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"rotate!(ta::TrjArray{T, U}, quater::AbstractVector{T}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.rotate!-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, AbstractVector{T}}} where {T, U}","page":"Structural computations","title":"MDToolbox.rotate!","text":"rotate!(ta::TrjArray, quaternion::Vector)\n\nPerforms rotation of coordinates of the given TrjArray object ta.  Rotation matrix is constructed fromt the given quaternion vector. \n\nThe coordinates of ta is replaced with the rotated ones. \n\nExample\n\njulia> ta = mdload(\"ak.dcd\")\njulia> quaternion = [0.80951112,  0.10657412,  0.35146912,  0.45804312]\njulia> rotate!(ta, quaternion)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"rotate(ta_single::TrjArray{T, U}, quater::AbstractMatrix{T}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.rotate-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, AbstractMatrix{T}}} where {T, U}","page":"Structural computations","title":"MDToolbox.rotate","text":"rotate(ta::TrjArray, quaternions::Matrix) -> ta_rotated::TrjArray\n\nPerforms multiple rotations of the coordinates of the 1st frame of the given TrjArray object ta.  Rotation matrices are construcuted from the 2-dimensional Array quaternions. One set of quaternions for rotaton should be given in a row vector in quaternions. \n\nReturns the trajecotry with rotated coordinates from the 1st frame of ta. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> quaternions = [0.80951112  0.10657412  0.35146912  0.45804312; \n>                     0.10657412  0.80951112  -0.35146912  0.45804312]\njulia> ta_rotated = rotate(ta, quaternions)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"rotate_with_matrix(ta::TrjArray{T, U}, R::AbstractMatrix{T}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.rotate_with_matrix-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, AbstractMatrix{T}}} where {T, U}","page":"Structural computations","title":"MDToolbox.rotate_with_matrix","text":"rotate_with_matrix(ta::TrjArray, R::Matrix) -> ta_rotated::TrjArray\n\nPerforms rotation of coordinates of the given TrjArray object ta with the given rotation matrix. \n\nThe coordinates of ta is replaced with the rotated ones. \n\nExample\n\njulia> ta = mdload(\"ak.dcd\")\njulia> R = [0.36 0.48 -0.8;\n            -0.8 0.60 0.0;\n            -.48 0.64 0.60]\njulia> ra_rotated = rotate(ta, R)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"superimpose(ref::TrjArray{T, U}, ta::TrjArray{T, U}; isweight::Bool=true, index::AbstractVector=Vector{U}(undef, 0), isdecenter::Bool=false) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.superimpose-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, TrjArray{T, U}}} where {T, U}","page":"Structural computations","title":"MDToolbox.superimpose","text":"superimpose(ref::TrjArray, ta::TrjArray; isweight=true, index::Union{UnitRange,Vector,BitArray}, isdecenter=false) -> ta_superimposed::TrjArray\n\nPerforms the least-squares fitting of the given trajectory (TrjArray object ta)  to the reference structure (1st frame of TrjArray object ref).  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty). Uses can specify column indices for the COM calculation by giving index which should be a Vector of integers, a UnitRange, or a BiArray.  When isdecenter is true, the function assumes the COMs of both structures are located at the origin (default is isdecenter=false). \n\nReturns the superimposed trajecotry. \n\nThe code of this function is licensed under the BSD license (Copyright (c) 2009-2016 Pu Liu and Douglas L. Theobald), see LICENSE.md\n\nExample\n\njulia> ref = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=pdb)\njulia> ta_superimposed = superimpose(ref, ta)\n\nReferences\n\nThe algorithm of this function is based on \nP. Liu, D. K. Agrafiotis, and D. L. Theobald, \nJ. Comput. Chem. 31, 1561-1563 (2010).\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_rmsd(ref::TrjArray{T, U}, ta::TrjArray{T, U}; isweight::Bool=true, index::AbstractVector=Vector{U}(undef, 0)) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_rmsd-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, TrjArray{T, U}}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_rmsd","text":"compute_rmsd(ref::TrjArray, ta::TrjArray; isweight=true, index=index::Union{UnitRange,Vector,BitArray}) -> rmsd\n\nCalculates the root mean square deviations (RMSD) of the given trajectory (TrjArray object ta) from the reference structure (1st frame of TrjArray object ref).  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty). Uses can specify column indices for the RMSD calculation by giving index which should be a Vector of integers, a UnitRange, or a BiArray. \n\nReturns RMSD values. \n\nExample\n\njulia> ref = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.nc\", top=pdb)\njulia> ta_superimposed = superimpose(ref, ta)\njulia> rmsd = compute_rmsd(ref, ta_superimposed)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"meanstructure(ta::TrjArray{T, U}; isweight::Bool=true, index::Vector{U}=Vector{U}(undef, 0)) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.meanstructure-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.meanstructure","text":"meanstructure(ta::TrjArray; isweight=true, index=index::Union{UnitRange,Vector,BitArray}) -> ta_mean::TrjArray, ta_superimposed::TrjArray\n\nCalculates the mean structure of the given trajectory (TrjArray object ta) by iteratively fitting the trajecotry to tentative mean structures until the mean structure converges.  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty). Uses can specify column indices for the fitting (superimpose function) by giving index which should be a Vector of integers, a UnitRange, or a BiArray. \n\nReturns the mean structure as TrjArray object, and the supserimposed trajectory to the mean structure. \n\nExample\n\njulia> ta = mdload(\"ak.nc\", top=pdb)\njulia> ta_mean, ta_superimposed = meanstructure(ta)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_rmsf(ta::TrjArray{T, U}; isweight::Bool=true) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_rmsf-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_rmsf","text":"compute_rmsf(ta::TrjArray{T, U}; isweight::Bool=true) -> rmsf\n\nrmsf (root mean square fluctuation)\n\nCalculates the root mean square fluctuations (RMSFs) of the atoms in the given trajectory (TrjArray object ta).  from the average coordinates of the trajectory.  If isweight is true (default), coordinates are weighted by ta.mass (as long as ta.mass is not empty).\n\nReturns RMSF values. \n\nExample\n\njulia> ta = mdload(\"ak.nc\", top=pdb)\njulia> ta_mean, ta_superimposed = meanstructure(ta)\njulia> rmsf = compute_rmsf(ta)\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_distance(ta::TrjArray{T, U}, index=[1 2]::Matrix{U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_distance-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, Any}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_distance","text":"compute_distance(ta::TrjArray, index::Matrix)\n\nCalculates distances between two atom pairs specified by the Matrix object index.  Each row vector in index contains two column indices for calculating distance.  Default of index is [1 2]. \n\nReturns distances specified pairs in index. \n\nExample\n\njulia> ta = mdload(\"ak.dcd\")\njulia> d = compute_distance(ta, [1 2; 1; 3])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_distance(ta1::TrjArray{T, U}, ta2::TrjArray{T, U}, index=[1 1]::Matrix{U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_distance-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, TrjArray{T, U}}, Tuple{TrjArray{T, U}, TrjArray{T, U}, Any}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_distance","text":"compute_distance(ta1::TrjArray, ta2::TrjArray, index::Matrix)\n\nCalculates distances between two atom pairs in ta1 and ta2 specified by the Matrix object index.  Each row vector in index contains a column index of ta1 and column index of ta2 for calculating distance.  Default of index is [1 1]. \n\nReturns distances specified pairs in index. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=ta)\njulia> d = compute_distance(ta[:, \"atomid 1\"], ta[:, \"atomid 9\"])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_distancemap(ta::TrjArray{T, U}; kneighbor=3) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_distancemap-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_distancemap","text":"compute_distancemap(ta::TrjArray; kneighbor=3)\n\nCalculates distance-map vectors from the given TrjArray ta.  If atomid=j and atomid=i are closer to each other than the specified kneighbor, i.e., abs(i-j) < kneighbor,  the calculation of the distance is ignored, considering that they are not nonbonded pairs.  The default value of kneighbor is 3. \n\nReturns distance-map vectors of all frames. The distance-map of each frame is contained in a row vector of the output.\n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=ta)\njulia> d = compute_distancemap(ta[\"atomname CA\"])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_contactmap(ta::TrjArray{T, U}; rcut=8.5, kneighbor=3) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_contactmap-Union{Tuple{TrjArray{T, U}}, Tuple{U}, Tuple{T}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_contactmap","text":"compute_contactmap(ta::TrjArray; rcut=8.5, kneighbor=3)\n\nCalculates contact-map vectors from the given TrjArray ta.  Cut-off value for contact can be given in rcut (default is rcut=8.5).  If atomid=j and atomid=i are closer to each other than the specified kneighbor, i.e., abs(i-j) < kneighbor,  the calculation of the distance is ignored, considering that they are not nonbonded pairs.  The default value of kneighbor is 3. \n\nReturns contact-map vectors of all frames. The contact-map of each frame is contained in a row vector of the output. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=ta)\njulia> d = compute_distancemap(ta[\"atomname CA\"])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_angle(ta1::TrjArray{T, U}, ta2::TrjArray{T, U}, ta3::TrjArray{T, U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_angle-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, TrjArray{T, U}, TrjArray{T, U}}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_angle","text":"compute_angle(ta1::TrjArray, ta2::TrjArray, ta3::TrjArray)\n\nCalculates angles for the atom coordinates or the COMs of groups from the triplet of ta1, ta2 and ta3. \n\nReturns angles.\n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=ta)\njulia> a = compute_distance(ta[:, \"atomid 1\"], ta[:, \"atomid 9\"], ta[:, \"atomid 11\"])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_dihedral(ta1::TrjArray{T, U}, ta2::TrjArray{T, U}, ta3::TrjArray{T, U}, ta4::TrjArray{T, U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_dihedral-Union{Tuple{U}, Tuple{T}, NTuple{4, TrjArray{T, U}}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_dihedral","text":"compute_dihedral(ta1::TrjArray, ta2::TrjArray, ta3::TrjArray, ta4::TrjArray)\n\nCalculates dihedral angles for the atom coordinates or the COMs of groups from the quadruplet of ta1, ta2, ta3 and ta4. \n\nReturns dihedral angles.\n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=ta)\njulia> d = compute_dihedral(ta[:, \"atomid 1\"], ta[:, \"atomid 9\"], ta[:, \"atomid 11\", ta[:, \"atom 13\"]])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_dihedral(ta::TrjArray{T, U}, array_index) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_dihedral-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, Any}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_dihedral","text":"compute_dihedral(ta1::TrjArray, ta2::TrjArray, ta3::TrjArray, ta4::TrjArray)\n\nCalculates dihedral angles for the atom coordinates or the COMs of groups from the quadruplet of ta1, ta2, ta3 and ta4. \n\nReturns dihedral angles.\n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=ta)\njulia> d = compute_dihedral(ta[:, \"atomid 1\"], ta[:, \"atomid 9\"], ta[:, \"atomid 11\", ta[:, \"atom 13\"]])\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_qscore(native::TrjArray{T, U}, ta::TrjArray{T, U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_qscore-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, TrjArray{T, U}}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_qscore","text":"compute_qscore(native::TrjArray, ta::TrjArray) -> qscore::Array\n\nCalculates all-atom based Q-score from given heavy atom coordinates. \n\nReturns Q-scores. \n\nExample\n\njulia> native = mdload(\"ak.pdb\")\njulia> ta = mdload(\"ak.dcd\", top=native)\njulia> qscore = compute_qscore(native[\"not hydrogen\"], ta[\"not hydrogen\"])\n\nReferences\n\nDefinition of Q-score from heavy atoms is given in \nR. B. Best, G. Hummer, and W. A. Eaton, PNAS 110, 17874 (2013).\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_drms(native1::TrjArray{T, U}, native2::TrjArray{T, U}, ta1::TrjArray{T, U}, ta2::TrjArray{T, U}) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_drms-Union{Tuple{U}, Tuple{T}, NTuple{4, TrjArray{T, U}}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_drms","text":"compute_drms(native1::TrjArray, native2::TrjArray, ta1::TrjArray, ta2::TrjArray) -> drms\n\nCalculates distance-based root mean square displacements (DRMS) from the given trajectories.  First, native contacts between molecule1 and molecule2 are identified from the two native structures native1 and native2 where cutoff distance of 6.0 Angstrom is used.  Then, the DRMS are calculated from the trajectories of molecule1 ta1 and molecule2 ta2. \n\nReturns distance-based root mean square displacements. \n\nExample\n\njulia> native1 = mdload(\"protein.pdb\")[\"not hydrogen\"]\njulia> native2 = mdload(\"ligand.pdb\")[\"not hydrogen\"]\njulia> ta1 = mdload(\"protein.dcd\")[\"not hydrogen\"]\njulia> ta2 = mdload(\"ligand.dcd\")[\"not hydrogen\"]\njulia> drms = compute_drms(native1, native2, ta1, ta2)\n\nReferences\n\nDefinition of DRMS is given in \nJ. Domański, G. Hedger, R. B. Best, P. J. Stansfeld, and M. S. P. Sansom, \nConvergence and Sampling in Determining Free Energy Landscapes for Membrane Protein Association, \nJ. Phys. Chem. B 121, 3364 (2017).\n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_pairlist(ta::TrjArray{T, U}, rcut::T; iframe=1::Int) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_pairlist-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, T}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_pairlist","text":"compute_pairlist(ta::TrjArray, rcut; iframe=1::Int) -> F\n\nMake a pairlist for the given strcuture ta1 by searching pairs within a cutoff distance rcut.  By default, the 1st frame of ta1 is used. Users can specify the frame by iframe. \n\nReturns a NamedTuple object F which contains the pair lists in F.pair,  and the distances of corresponding pairs in F.dist. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> F = compute_pairlist(ta, 8.0)\n\nReferences\n\nThe algorithm of this function is based on \nT.N. Heinz, and P.H. Hünenberger, \nA fast pairlist-construction algorithm for molecular simulations under periodic boundary conditions. \nJ Comput Chem 25, 1474–1486 (2004). \n\n\n\n\n\n","category":"method"},{"location":"structure/","page":"Structural computations","title":"Structural computations","text":"compute_pairlist_bruteforce(ta::TrjArray{T, U}, rcut::T; iframe=1::Int) where {T, U}","category":"page"},{"location":"structure/#MDToolbox.compute_pairlist_bruteforce-Union{Tuple{U}, Tuple{T}, Tuple{TrjArray{T, U}, T}} where {T, U}","page":"Structural computations","title":"MDToolbox.compute_pairlist_bruteforce","text":"compute_pairlist_bruteforce(ta::TrjArray, rcut; iframe=1::Int) -> F\n\nBruteforce search version of compute_pairlist function. Mainly used for debugging. \n\nReturns a NamedTuple object F which contains the pair lists in F.pair,  and the distances of corresponding pairs in F.dist. \n\nExample\n\njulia> ta = mdload(\"ak.pdb\")\njulia> F = compute_pairlist(ta, 8.0)\n\n\n\n\n\n","category":"method"},{"location":"#MDToolbox.jl","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"","category":"section"},{"location":"#What-is-MDToolbox.jl?","page":"MDToolbox.jl","title":"What is MDToolbox.jl?","text":"","category":"section"},{"location":"","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"MDToolbox.jl is a pure Julia package for molecular dynamics (MD) trajectories analysis and modeling of biomolecules. The package contains functions covering the following types of scientific computations:","category":"page"},{"location":"","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"I/O for trajectory, coordinate, and topology files used for MD simulations\nUnique type (TrjArray) for storing and processing MD trajectory data\nFlexible atom selections\nVarious structural computations, including the least-squares fitting of structures, atom distances, angles, dihedrals, etc.\nPotential of mean force (PMF) or free energy profile from unbiased MD trajectories\nStatistical estimates (WHAM and MBAR methods) from biased MD trajectories\nDimensional reductions (Principal Component Analysis, and others)\nMarkov state model, etc. ","category":"page"},{"location":"","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"Some functions have been imported to this package from our old MATLAB/Octave toolbox https://github.com/ymatsunaga/mdtoolbox","category":"page"},{"location":"#Citations","page":"MDToolbox.jl","title":"Citations","text":"","category":"section"},{"location":"","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"In preparation","category":"page"},{"location":"#License","page":"MDToolbox.jl","title":"License","text":"","category":"section"},{"location":"","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"MDToolbox.jl is licensed under the BSD 3-Clause License.","category":"page"},{"location":"#Contents","page":"MDToolbox.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"MDToolbox.jl","title":"MDToolbox.jl","text":"Pages = [\"installation.md\",\n        \"getting_started01.md\", \n        \"getting_started02.md\", \n        \"getting_started03.md\", \n        \"superimpose_rmsd.md\",\n        \"free_energy_surface.md\",\n        \"wham_example.md\",\n        \"fileio.md\", \n        \"structure.md\", \n        \"reduction.md\", \n        \"wham.md\", \n        \"mbar.md\", \n        \"msm.md\", \n        \"workflow_for_developers.md\"]\nDepth = 2","category":"page"},{"location":"superimpose_rmsd/#Superimpose-and-RMSD","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"","category":"section"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"using MDToolbox, PyPlot\nPyPlot.plt.style.use(\"seaborn-colorblind\");\nENV[\"COLUMNS\"] = 110; #display width for MDToolbox","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"t = readpdb(\"data/3gb1.pdb\")","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"32x855 TrjArray{Float64, Int64}\n| A                          | A                          |  …   A                          |\n| 1MET                       | 1MET                       |  …   56GLU                      |\n| 1N                         | 2CA                        |  …   855HG3                     |\n|   -13.15    -1.71     5.51 |   -12.20    -2.85     5.70 |  …      10.24     2.24    -4.53 |\n|   -13.16    -2.75     4.19 |   -12.38    -3.43     5.26 |         10.29     1.79    -3.20 |\n|   -13.26    -2.20     5.12 |   -12.23    -3.26     5.29 |         11.09     3.24    -6.13 |\n|   -12.45    -4.30     6.28 |   -12.25    -3.22     5.28 |         11.75     2.57    -3.31 |\n|   -13.05    -1.52     5.31 |   -12.15    -2.68     5.56 |         10.46     1.51    -3.50 |\n|   -12.98    -3.74     6.65 |   -12.43    -3.31     5.34 |  …      11.26     3.06    -3.59 |\n|   -13.03    -2.10     3.64 |   -12.47    -2.79     4.83 |         10.38     1.53    -3.30 |\n|   -13.00    -2.17     5.21 |   -12.09    -3.19     5.78 |         11.32     3.37    -5.78 |\n|   -12.57    -2.96     3.87 |   -12.12    -3.42     5.21 |         10.36     1.38    -3.53 |\n|   -12.60    -2.85     4.27 |   -12.16    -3.02     5.68 |         10.44     1.40    -3.37 |\n|   -13.12    -1.61     4.72 |   -12.34    -2.60     5.52 |  …      10.96     3.58    -5.68 |\n|             ⋮              |             ⋮              |  ⋱               ⋮              |\n|   -13.46    -2.54     6.05 |   -12.41    -3.14     5.18 |         10.33     1.63    -3.72 |\n|   -12.61    -4.31     6.34 |   -12.22    -3.51     5.15 |         10.26     1.56    -3.59 |\n|   -13.24    -2.72     6.28 |   -12.16    -3.34     5.45 |         11.30     2.91    -3.41 |\n|   -13.21    -2.29     5.61 |   -12.13    -3.31     5.53 |         11.76     2.84    -5.65 |\n|   -12.75    -2.42     4.33 |   -12.22    -2.96     5.61 |  …      11.53     3.05    -5.67 |\n|   -13.32    -2.12     5.10 |   -12.27    -3.17     5.25 |         10.38     1.88    -3.32 |\n|   -13.07    -2.31     4.32 |   -12.27    -3.22     5.19 |         11.65     3.11    -5.90 |\n|   -12.76    -3.69     6.68 |   -12.11    -3.33     5.38 |         11.51     2.97    -5.63 |\n|   -13.21    -2.55     5.53 |   -12.06    -3.41     5.11 |         10.26     1.60    -3.20 |\n|   -13.13    -2.12     4.11 |   -12.34    -3.00     5.02 |  …      12.68     3.28    -4.88 |\n|   -12.81    -2.86     4.32 |   -12.23    -3.33     5.62 |          9.98     2.33    -5.34 |","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"t = t[\"atomname CA\"]","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"32x56 TrjArray{Float64, Int64}\n| A                          | A                          |  …   A                          |\n| 1MET                       | 2THR                       |  …   56GLU                      |\n| 1CA                        | 2CA                        |  …   56CA                       |\n|   -12.20    -2.85     5.70 |    -8.56    -2.53     6.83 |  …      11.49     0.13    -5.58 |\n|   -12.38    -3.43     5.26 |    -8.87    -2.64     6.54 |         11.44     0.44    -5.31 |\n|   -12.23    -3.26     5.29 |    -8.72    -2.69     6.68 |         11.25     0.63    -5.48 |\n|   -12.25    -3.22     5.28 |    -8.71    -2.59     6.57 |         11.68    -0.09    -5.47 |\n|   -12.15    -2.68     5.56 |    -8.52    -2.44     6.78 |         11.68    -0.04    -5.48 |\n|   -12.43    -3.31     5.34 |    -8.88    -2.65     6.64 |  …      11.38     0.31    -5.62 |\n|   -12.47    -2.79     4.83 |    -8.96    -2.38     6.31 |         11.32     0.25    -5.52 |\n|   -12.09    -3.19     5.78 |    -8.49    -2.67     7.00 |         11.30     0.70    -5.25 |\n|   -12.12    -3.42     5.21 |    -8.62    -2.86     6.66 |         11.62    -0.11    -5.43 |\n|   -12.16    -3.02     5.68 |    -8.57    -2.46     6.85 |         11.66    -0.05    -5.34 |\n|   -12.34    -2.60     5.52 |    -8.73    -2.27     6.76 |  …      11.08     0.87    -5.37 |\n|             ⋮              |             ⋮              |  ⋱               ⋮              |\n|   -12.41    -3.14     5.18 |    -8.91    -2.49     6.59 |         11.38     0.16    -5.77 |\n|   -12.22    -3.51     5.15 |    -8.73    -2.78     6.53 |         11.64     0.04    -5.38 |\n|   -12.16    -3.34     5.45 |    -8.67    -2.57     6.82 |         11.47     0.16    -5.46 |\n|   -12.13    -3.31     5.53 |    -8.57    -2.69     6.80 |         11.61     0.16    -5.16 |\n|   -12.22    -2.96     5.61 |    -8.63    -2.57     6.89 |  …      11.24     0.31    -5.38 |\n|   -12.27    -3.17     5.25 |    -8.78    -2.54     6.67 |         11.39     0.51    -5.45 |\n|   -12.27    -3.22     5.19 |    -8.76    -2.62     6.60 |         11.36     0.48    -5.34 |\n|   -12.11    -3.33     5.38 |    -8.60    -2.68     6.76 |         11.52     0.26    -5.29 |\n|   -12.06    -3.41     5.11 |    -8.63    -2.73     6.65 |         11.30     0.45    -5.44 |\n|   -12.34    -3.00     5.02 |    -8.86    -2.42     6.49 |  …      11.33     0.19    -5.53 |\n|   -12.23    -3.33     5.62 |    -8.71    -2.59     6.92 |         11.31     0.03    -5.65 |","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"t_fitted = superimpose(t[1, :], t)","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"32x56 TrjArray{Float64, Int64}\n| A                          | A                          |  …   A                          |\n| 1MET                       | 2THR                       |  …   56GLU                      |\n| 1CA                        | 2CA                        |  …   56CA                       |\n|   -12.20    -2.84     5.70 |    -8.56    -2.53     6.83 |  …      11.49     0.13    -5.58 |\n|   -12.38    -3.43     5.26 |    -8.87    -2.64     6.54 |         11.43     0.45    -5.31 |\n|   -12.23    -3.26     5.30 |    -8.71    -2.69     6.69 |         11.24     0.63    -5.49 |\n|   -12.24    -3.26     5.31 |    -8.70    -2.62     6.60 |         11.66    -0.06    -5.49 |\n|   -12.16    -2.69     5.58 |    -8.52    -2.45     6.80 |         11.66    -0.02    -5.49 |\n|   -12.41    -3.32     5.37 |    -8.86    -2.67     6.66 |  …      11.36     0.32    -5.64 |\n|   -12.47    -2.80     4.83 |    -8.96    -2.39     6.30 |         11.33     0.26    -5.52 |\n|   -12.08    -3.19     5.78 |    -8.49    -2.68     7.00 |         11.30     0.71    -5.26 |\n|   -12.12    -3.43     5.22 |    -8.62    -2.87     6.67 |         11.60    -0.10    -5.44 |\n|   -12.17    -3.05     5.68 |    -8.58    -2.48     6.85 |         11.65    -0.03    -5.34 |\n|   -12.33    -2.61     5.52 |    -8.72    -2.28     6.76 |  …      11.08     0.88    -5.37 |\n|             ⋮              |             ⋮              |  ⋱               ⋮              |\n|   -12.41    -3.15     5.20 |    -8.91    -2.49     6.60 |         11.37     0.16    -5.78 |\n|   -12.22    -3.54     5.19 |    -8.72    -2.81     6.56 |         11.61     0.06    -5.40 |\n|   -12.16    -3.34     5.48 |    -8.66    -2.57     6.83 |         11.45     0.17    -5.47 |\n|   -12.13    -3.31     5.55 |    -8.58    -2.70     6.82 |         11.58     0.18    -5.17 |\n|   -12.22    -2.97     5.60 |    -8.63    -2.58     6.89 |  …      11.24     0.31    -5.37 |\n|   -12.27    -3.17     5.26 |    -8.77    -2.54     6.68 |         11.38     0.51    -5.46 |\n|   -12.28    -3.22     5.19 |    -8.76    -2.63     6.60 |         11.36     0.48    -5.34 |\n|   -12.11    -3.35     5.42 |    -8.59    -2.71     6.79 |         11.49     0.28    -5.31 |\n|   -12.06    -3.41     5.13 |    -8.62    -2.73     6.66 |         11.29     0.45    -5.45 |\n|   -12.34    -3.01     5.02 |    -8.86    -2.43     6.49 |  …      11.33     0.20    -5.53 |\n|   -12.23    -3.33     5.60 |    -8.70    -2.60     6.91 |         11.31     0.04    -5.65 |","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"rmsd = compute_rmsd(t[1, :], t_fitted)","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"32-element Vector{Float64}:\n 8.853627753684163e-16\n 0.28146368488385065\n 0.2750350748475739\n 0.24973464134169102\n 0.22735600178052792\n 0.2653009125188729\n 0.28969307997815175\n 0.2753408219451508\n 0.2815643693410406\n 0.2782390718028653\n 0.3099827765697495\n 0.174968200571879\n 0.2804481185873863\n ⋮\n 0.26335019491087885\n 0.28936993048207693\n 0.30942464286388355\n 0.25404746685533475\n 0.2755833794901712\n 0.1926899282393233\n 0.25043406886062536\n 0.20596652429140358\n 0.22978870831859918\n 0.2535727519868658\n 0.24359209784417915\n 0.262633972279415","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"fig, ax = subplots(figsize=(8, 6))\nax.plot(1:t.nframe, rmsd, linewidth=3)\nxlabel(\"NMR structures\", fontsize=20)\nylabel(\"RMSD from the first structure\", fontsize=20)\n\n# detailed options (if your prefer to change details)\nax.set(xlim=[1, t.nframe], ylim=[0.0, 0.4])\nax.grid(linestyle=\"--\", linewidth=0.5)\nax.xaxis.set_tick_params(which=\"major\",labelsize=15)\nax.yaxis.set_tick_params(which=\"major\",labelsize=15)\nax.grid(linestyle=\"--\", linewidth=0.5)\ntight_layout()\n\nsavefig(\"superimpose_rmsd.png\", dpi=350)","category":"page"},{"location":"superimpose_rmsd/","page":"Superimpose and RMSD","title":"Superimpose and RMSD","text":"(Image: png)","category":"page"},{"location":"wham/#WHAM-(Weighted-Histogram-Analysis-Method)","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"","category":"section"},{"location":"wham/","page":"WHAM (Weighted Histogram Analysis Method)","title":"WHAM (Weighted Histogram Analysis Method)","text":"wham(h_km, bias_km; ftol=1e-10, iterations=10^5)","category":"page"},{"location":"wham/#MDToolbox.wham-Tuple{Any, Any}","page":"WHAM (Weighted Histogram Analysis Method)","title":"MDToolbox.wham","text":"wham(h_km, bias_km; ftol=1e-10, maxiterations=10^5) -> F\n\nEstimates (reduced) free energies of umbrella-windows and potential of mean force in data-bins by using the WHAM equations. K is # of umbrellas and M is # of bins. h_km is a K x M Array which is a histogram (data counts) of k-th umbrella data in m-th bin. bias_km is also a K x M Array which is a bias-factor of k-th umbrella-window evaluated at m-th bin-center. \n\nReturns a NamedTuple object F whose members are F.f_k reduced relative free energies of umbrella-windows,  and pmf_m reduced potential of mean force in data-bins under unbiased condition. \n\nReferences\n\nS. Kumar, D. Bouzida, R. H. Swendsen, P. A. Kollman, and J. M. Rosenberg, \nJ. Comput. Chem. 13, 1011 (1992).\n\n\n\n\n\n","category":"method"}]
}
